buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "https://maven.minecraftforge.net/"
        }
    }
    dependencies {
        // Use custom ForgeGradle to use latest version of Gradle
        classpath("com.anatawa12.forge:ForgeGradle:1.2-1.0.+") {
            changing = true
        }
    }
}

plugins {
    id "java"
    id "maven-publish"
}

apply plugin: "forge"

// These settings allow you to choose what version of Java you want to be compatible with,
// Forge 1.7.10 runs on Java 6 to 8
sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8

compileJava {
    // Ensures that the encoding of source files is set to UTF-8,
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    options.encoding = "UTF-8"
}

if (JavaVersion.current() != JavaVersion.VERSION_1_8) {
    throw new GradleException("This project requires Java 8, but it's running on ${JavaVersion.current()}")
}

checkPropertyExists("versionMajor")
checkPropertyExists("versionMinor")
checkPropertyExists("versionPatch")
checkPropertyExists("minecraftVersion")
checkPropertyExists("forgeVersion")

version = "${minecraftVersion}-${versionMajor}.${versionMinor}.${versionPatch}"
group = "tech.dakenviy.patcher"
archivesBaseName = "mcpatcher"

repositories {
    flatDir {
        dirs "lib"
    }
}

apply from: "dependencies.gradle"

minecraft {
    version = "${minecraftVersion}-${forgeVersion}-${minecraftVersion}"
    runDir = "run"
}

// This task creates a .jar file containing a deobfuscated version of this mod,
// for other developers to use in a development environment.
task devJar(type: Jar) {
    classifier "dev"
    from sourceSets.main.output
}

// This task creates a .jar file containing the source code of this mod
task sourcesJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allSource
}

artifacts {
    archives devJar
    archives sourcesJar
}

// Disable generating module file because it has broken dependencies
tasks.withType(GenerateModuleMetadata) {
    enabled = false
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            artifact source: devJar, classifier: "dev"
            artifact source: sourcesJar, classifier: "sources"

            pom.withXml {
                def minecraftDependencies = getMinecraftDependencies()

                // example for specifying extra stuff to ignore
                // badArtifacts["org.example.group"] += "artifactName"

                def pomNode = asNode()

                // remove extra garbage from minecraft and minecraftDeps configuration
                pomNode.dependencies.'*'.findAll() {
                    minecraftDependencies[it.groupId.text()].contains(it.artifactId.text())
                }.each() {
                    it.parent().remove(it)
                }
            }
        }
    }

    repositories {
        mavenLocal()
    }
}

// Helpers

def checkPropertyExists(String propertyName) {
    if (!project.hasProperty(propertyName)) {
        throw new GradleException("This project requires a property \"${propertyName}\"! Please add it to your \"gradle.properties\"")
    }
}

def getMinecraftDependencies() {
    def result = [:].withDefault { [] as Set<String> }

    for (configuration in [configurations.minecraft, configurations.minecraftDeps]) {
        for (dependency in configuration.allDependencies) {
            result[dependency.group == null ? "" : dependency.group] += dependency.name
        }
    }

    return result
}